#+TITLE:Emacs Configuration
#+AUTHOR:Dimitar Petrov
#+STARTUP: overview

* Personal Information

#+BEGIN_SRC emacs-lisp
  (setq user-full-name "Dimitar Petrov"
        user-mail-address "petrov.dimp@gmail.com")
#+END_SRC

* Initializa MELPA

#+BEGIN_SRC emacs-lisp
  (when (>= emacs-major-version 24)
    (setq-default
     load-prefer-newer t
     package-enable-at-startup nil)
    (package-initialize)
    (add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/") t)
    (unless (package-installed-p 'delight)
      (package-refresh-contents)
      (package-install 'delight))
    (unless (package-installed-p 'use-package)
      (package-refresh-contents)
      (package-install 'use-package)))
#+END_SRC

* Define Personal Functions  
** Tone Down Fringes
#+BEGIN_SRC emacs-lisp
  ;; Function
  (defun my-tone-down-fringes ()
    "Changes the leader background to be the same as THEME background color."
    (set-face-attribute 'fringe nil
                        :foreground (face-foreground 'default)
                        :background (face-background 'default)))
#+END_SRC

* Themes
** Use fancy lambdas

#+BEGIN_SRC emacs-lisp
  (global-prettify-symbols-mode t)
#+END_SRC

** Cyberpunk theme

The cyberpunk theme is dark and colorful. The code bellow removes the boxes around the modeline
#+BEGIN_SRC emacs-lisp
(use-package cyberpunk-theme
  :if (window-system)
  :ensure t
  :init
  (progn
    (set-face-attribute `mode-line nil
                        :box nil)
    (set-face-attribute `mode-line-inactive nil
                        :box nil)))
#+END_SRC

** Solarized theme

Here's some configuration for bbatsov's solarized themes.
#+BEGIN_SRC emacs-lisp
  (use-package solarized-theme
    :defer 10
    :init
    (setq solarized-use-variable-pith nil)
    :ensure t)
#+END_SRC

** Monokai theme

#+BEGIN_SRC emacs-lisp
  (use-package monokai-theme
    :ensure t
    :init
    (setq monokai-use-variable-pitch nil))
#+END_SRC

** Waher theme

#+BEGIN_SRC emacs-lisp
    (use-package waher-theme
      :if (window-system)
      :ensure t
      :init)
#+END_SRC

** Zenburn theme
   
#+BEGIN_SRC emacs-lisp
  (use-package zenburn-theme
    :ensure t
    :init)
#+END_SRC

** Spacemacs theme

#+BEGIN_SRC emacs-lisp
   (use-package spacemacs-theme
        :ensure t
        :init)
#+END_SRC

** Convenient theme functions

#+BEGIN_SRC emacs-lisp
      (defun switch-theme (theme)
        "Disables any currently active themes and loads THEME."
        ;; This interactive call is taken from `load-theme'
        (interactive
         (list
          (intern (completing-read "Load custom theme: "
                                   (mapc 'symbol-name
                                         (custom-available-themes))))))
        (let ((enabled-themes custom-enabled-themes))
          (mapc #'disable-theme custom-enabled-themes)
          (load-theme theme t))
        (my-tone-down-fringes)
  )

  (switch-theme 'solarized-dark)

      (defun disable-active-themes ()
        "Disables any currently active themes listed in `custom-enabled-themes'."
        (interactive)
        (mapc #'disable-theme custom-enabled-themes))

      (bind-key "s-<f12>" 'switch-theme)
      (bind-key "s-<f11>" 'disable-active-themes)
#+END_SRC

* Font

Source Code Pro is a nice monospaced font.
Here is how we tell Emacs to use the font we want to use.
#+BEGIN_SRC emacs-lisp
  (add-to-list 'default-frame-alist
               '(font . "Source Code Pro-10"))
#+END_SRC

* Evil Mode
** Leader key
In oder to define and use a <leader> prefix for your personal shortcuts you have to install the package evil-leader. In order to work on all buffers (*messages*/*scratch*), evil-leader has to be loaded before evil. [[https://github.com/cofi/evil-leader/issues/10][Evil-leader issue in generic buffers]]

#+BEGIN_SRC emacs-lisp
  (use-package evil-leader
    :ensure t)
  (setq evil-leader/in-all-states 1)
  (global-evil-leader-mode)
  (evil-leader/set-leader ",")
#+END_SRC

** Load evil package and enable evil-mode

 #+BEGIN_SRC emacs-lisp
   (use-package evil
     :ensure t
     :init)
   (require 'evil)
   (evil-mode t)
 #+END_SRC

** Load evil-surround

#+BEGIN_SRC emacs-lisp
  (use-package evil-surround
    :ensure t)
  (global-evil-surround-mode 1)
#+END_SRC

** Use escape to get out of as much stuff as possible.

#+BEGIN_SRC emacs-lisp
  (bind-key "<escape>" 'isearch-cancel isearch-mode-map)
  (define-key minibuffer-local-map (kbd "ESC") 'abort-recursive-edit)
  (define-key minibuffer-local-ns-map (kbd "ESC") 'abort-recursive-edit)
  (define-key minibuffer-local-completion-map (kbd "ESC") 'abort-recursive-edit)
  (define-key minibuffer-local-must-match-map (kbd "ESC") 'abort-recursive-edit)
  (define-key minibuffer-local-isearch-map (kbd "ESC") 'abort-recursive-edit)
;  (bind-key "<escape>" 'helm-keyboard-quit helm-map)
;  (bind-key "<escape>" 'helm-keyboard-quit helm-comp-read-map)
#+END_SRC

** Rebinding window navigation in Evil mode in emacs

#+BEGIN_SRC emacs-lisp
    (eval-after-load "evil"
      '(progn
;;         (define-key evil-normal-state-map (kbd "C-j") 'evil-window-down)
;;         (define-key evil-normal-state-map (kbd "C-l") 'evil-window-right)
;;         (define-key evil-motion-state-map (kbd "C-j") 'evil-window-down)
;;         (define-key evil-motion-state-map (kbd "C-l") 'evil-window-right)
         (evil-leader/set-key "k" 'evil-window-next)
         (evil-leader/set-key "j" 'evil-window-prev)))

#+END_SRC

** Commented
#** FIX: Org mode with Evil fails cycle with TAB in terminal emacs 
#
##+BEGIN_SRC emacs-lisp
#  (add-hook 'org-mode-hook
#            (lambda ()
#              (define-key evil-normal-state-map (kbd "TAB") 'org-cycle)))
##+END_SRC

** Bindings for Evil and Org-mode

#+BEGIN_SRC emacs-lisp
  (dolist (state '(normal visual))
;    (evil-define-key state org-mode-map (kbd "C-j") 'org-metadown)
;    (evil-define-key state org-mode-map (kbd "C-k") 'org-metaup)
    (evil-define-key state org-mode-map (kbd "<") 'org-metaleft)
    (evil-define-key state org-mode-map (kbd ">") 'org-metaright)
;    (evil-define-key state org-mode-map (kbd "M-h") 'org-metaleft)
;    (evil-define-key state org-mode-map (kbd "M-l") 'org-metaright)
    (evil-define-key state org-mode-map (kbd "M-J") 'org-shiftmetadown)
    (evil-define-key state org-mode-map (kbd "M-K") 'org-shiftmetaup)
    (evil-define-key state org-mode-map (kbd "M-H") 'org-shiftmetaleft)
    (evil-define-key state org-mode-map (kbd "M-L") 'org-shiftmetaright)
    (evil-define-key state org-mode-map (kbd "^") 'org-beginning-of-line)
    (evil-define-key state org-mode-map (kbd "$") 'org-end-of-line))

  (evil-define-key 'normal org-mode-map (kbd "<tab>") 'org-cycle)

;  (bind-key "J" 'org-agenda-goto-date org-agenda-mode-map)
;  (bind-key "j" 'evil-next-line org-agenda-mode-map)
;  (bind-key "k" 'evil-previous-line org-agenda-mode-map)

  ;;; evil surround pairs

  (defun evil-surround-org-pairs ()
    (push '(?= . ("=" . "=")) evil-surround-pairs-alist)
    (push '(?~ . ("~" . "~")) evil-surround-pairs-alist))

  (add-hook 'org-mode-hook 'evil-surround-org-pairs)

  ;;; get out of editing a source block

  (add-hook 'org-src-mode-map (lambda () (evil-local-set-key 'normal (kbd "Z Z") 'org-edit-src-exit)))
#+END_SRC

** Display relative numbers for the current buffer

#+BEGIN_SRC emacs-lisp
  (use-package relative-line-numbers
    :ensure t
    :init)
  (global-relative-line-numbers-mode)

  (defun relative-abs-line-numbers-format (offset)
    "The default formatting function.
  Return the absolute value of OFFSET, converted to string."
    (if (= 0 offset)
        (number-to-string (line-number-at-pos))
      (number-to-string (abs offset))))

  (setq relative-line-numbers-format 'relative-abs-line-numbers-format)
#+END_SRC

*** Disable line numbers in org-mode

#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook (lambda () (relative-line-numbers-mode 0)))
#+END_SRC

*** Define Leader shortcuts 
    
#+BEGIN_SRC emacs-lisp
  (evil-leader/set-key "l" 'evil-next-buffer)
  (evil-leader/set-key "h" 'evil-prev-buffer)
#+END_SRC

** Vim bindings for Org-Agenda
   
#+BEGIN_SRC emacs-lisp
  (add-to-list 'evil-motion-state-modes 'org-agenda-mode)
#+END_SRC

* Org Mode 
** Display Preferences
Display an outline of pretty bullets instead of list of asterisks

#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :ensure t)
  (require 'org-bullets)
  (add-hook 'org-mode-hook
            (lambda ()
              (org-bullets-mode t)))
  (setq org-hide-leading-stars t)
#+END_SRC

Also change the usual ellipsis(...) with a little downward-pointing that org displays when there is stuff under a header
#+BEGIN_SRC emacs-lisp
  (setq org-ellipsis "â¤µ")
#+END_SRC
Use syntax highlighting in source blocks while editing.
#+BEGIN_SRC emacs-lisp
(setq org-src-fontify-natively t)
#+END_SRC

Make TAB act as if it were issued in a buffer of the language's major mode

#+BEGIN_SRC emacs-lisp

#+END_SRC

** Org Modules

#+BEGIN_SRC emacs-lisp
  ; Enable habit tracking (and a bunch of other modules)
  (setq org-modules '(org-bbdb
                            org-bibtex
                            org-crypt
                            org-gnus
                            org-id
                            org-info
                            org-jsinfo
                            org-habit
                            org-inlinetask
                            org-irc
                            org-mew
                            org-mhe
                            org-protocol
                            org-rmail
                            org-vm
                            org-wl
                            org-w3m))

  ; position the habit graph on the agenda to the right of the default
  (setq org-habit-graph-column 50)

#+END_SRC

** Keybindings
   
#+BEGIN_SRC emacs-lisp
  (global-set-key "\C-cl" 'org-store-link)
  (global-set-key "\C-ca" 'org-agenda)
  (global-set-key "\C-cc" 'org-capture)
  (global-set-key "\C-cb" 'org-iswitchb)
#+END_SRC

** Add Org-Pomodoro

You can start a pomodoro for the task at point or select one from the last tasks that you clocked time for. Each clocked-in pomodoro starts a timer of 25 minutes and after each pomodoro break timer of 5 minutes is started automatically. Every 4 breaks long break is started with 20 minutes. All values are customizable.
#+BEGIN_SRC emacs-lisp
  (use-package org-pomodoro
    :ensure t)
#+END_SRC

** Editing source code
I do not want to get distracted by the same code in the other window, so i want org src to use the current window.

#+BEGIN_SRC emacs-lisp
  (setq org-src-window-setup 'current-window)
#+END_SRC

** Setting up default files
   The following sets a default target file for notes, and defines a global key for capturing new material.

#+BEGIN_SRC emacs-lisp
  ;; Set to the location of my Org files on the NFS Share
  (setq org-directory "/media/rdisk/new_tree/SelfImprover/OrgModeRepo")

  (setq org-default-notes-file (concat org-directory "/notes.org"))

  (setq org-capture-templates
        '(("t" "Todo" entry (file+headline
                             (concat org-directory "/NixOrg/gtd.org") "Tasks")
           "* TODO %?\n  %i\n  %a")
          ("j" "Journal" entry (file+datetree
                                (concat org-directory "/NixOrg/journal.org"))
           "* %?\nEntered on %U\n  %i\n  %a")))

  ;; Set up org-mobile-directory
  (setq org-mobile-directory (concat org-directory "/MobileOrg"))

  ;; Set to the name of the file where new notes will be stored
  (setq org-mobile-inbox-for-pull (concat org-directory "/NixOrg/flagged.org"))
#+END_SRC

** Org Agenda Configuration
   
#+BEGIN_SRC emacs-lisp
  (setq org-agenda-files
        (list (concat org-directory "/NixOrg/gtd.org")
              (concat org-directory "/NixOrg/notes.org")))
;;              (concat org-directory "/NixOrg/business.org")
;;              (concat org-directory "/NixOrg/personal.org")))
#+END_SRC

* Yaml Mode

Install and enable yaml mode

#+BEGIN_SRC emacs-lisp
  (use-package yaml-mode
    :ensure t)

  (add-hook 'yaml-mode-hook
            (lambda ()
              (define-key yaml-mode-map "\C-m" 'newline-and-indent)))
#+END_SRC  

* Use smex to handle M-x with ido

#+BEGIN_SRC emacs-lisp
  (use-package smex
    :ensure t)

  (smex-initialize)
  (global-set-key (kbd "M-x") 'smex)
  (global-set-key (kbd "M-X") 'smex-major-mode-commands)
#+END_SRC

* General configuration
** Turn off bars

#+BEGIN_SRC emacs-lisp
  (menu-bar-mode -1)
  (toggle-scroll-bar -1)
  (tool-bar-mode -1)
#+END_SRC

** Disable emacs welcome screen
   
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t)
#+END_SRC

** Adjust windows margins

#+BEGIN_SRC emacs-lisp
  (setq-default left-margin-width 0 right-margin-width 0) ; Define new widths.
   (set-window-buffer nil (current-buffer)) ; Use them now.
#+END_SRC

** Sane defaults

Some default configurations
#+BEGIN_SRC emacs-lisp
  ;; Answering just 'y' or 'n' will do
  (defalias 'yes-or-no-p 'y-or-n-p)

  ;; Turn off the blinking cursor
  (blink-cursor-mode -1)

#+END_SRC
 
Enable line highlight

#+BEGIN_SRC emacs-lisp
  (global-hl-line-mode t)
#+END_SRC

Disable Indent-Tabs-mode
#+BEGIN_SRC emacs-lisp
  (setq-default indent-tabs-mode nil)
  (setq-default tab-width 2)
#+END_SRC

** Backups
This is one of the things people usually want to change right away. Emacs saves backup files in the current directory.
 #+BEGIN_SRC emacs-lisp
   (setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
 #+END_SRC

** HTTP

#+BEGIN_SRC emacs-lisp
  (use-package ob-http
    :ensure t)
#+END_SRC

** Diagrams and graphics
Graphviz and Ditaa make it easier to create diagrams from Emacs. See http://sachachua.com/evil-plans for examples and source. 

#+BEGIN_SRC emacs-lisp
  (setq org-ditaa-jar-path "/usr/share/java/ditaa/ditaa-0_9.jar")
  (setq org-startup-with-inline-images t)
  (use-package org
    :config
    (progn
      (add-hook 'org-babel-after-execute-hook 'org-display-inline-images)
      (org-babel-do-load-languages
       'org-babel-load-languages
       '((dot . t)
         (ditaa . t)
         (sh . t)
         (http . t)
         (perl . t)
         (python . t)
         (R . t)))
      (add-to-list 'org-src-lang-modes '("dot" . graphviz-dot))))
#+END_SRC

** Powerline

#+BEGIN_SRC emacs-lisp
  (use-package powerline
    :ensure t)
  (require 'powerline)
  (powerline-vim-theme)
  (display-time-mode t)
#+END_SRC

** Helm-interactive completion
   
Help makes it easy to complete various things. I find it to be easier to configure that ido in order to get completion in as many places as possible, although I prefer ido's way of switching buffers.

#+BEGIN_SRC emacs-lisp
  (use-package helm
    :ensure t
    :diminish helm-mode
    :init
    (progn
      (require 'helm-config)
      (setq helm-candidate-number-limit 100)
      ;; From https://gist.github.com/antifuchs/9238468
      (setq helm-idle-delay 0.0 ; update fast sources immediately (doesn't).
            helm-input-idle-delay 0.01  ; this actually updates things
                                          ; reeeelatively quickly.
            helm-yas-display-key-on-candidate t
            helm-quick-update t
            helm-M-x-requires-pattern nil
            helm-ff-skip-boring-files t)
      (helm-mode))
    :bind (("C-c h" . helm-mini)
           ("C-h a" . helm-apropos)
           ("C-x C-b" . helm-buffers-list)
           ("C-x b" . helm-buffers-list)
           ("M-y" . helm-show-kill-ring)
           ("M-x" . helm-M-x)
           ("C-x c o" . helm-occur)
           ("C-x c s" . helm-swoop)
           ("C-x c y" . helm-yas-complete)
           ("C-x c Y" . helm-yas-create-snippet-on-region)
           ("C-x c SPC" . helm-all-mark-rings)))

#+END_SRC

Also, visual-line-mode is so much better than auto-fill-mode. It does not actually break the text into multiple lines - it only looks that way

#+BEGIN_SRC emacs-lisp
  (remove-hook 'text-mode-hook #'turn-on-auto-fill)
  (add-hook 'text-mode-hook 'turn-on-visual-line-mode)
#+END_SRC

** Projectile

Install projectile and helm-projectile

#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :ensure t
    :diminish projectile-mode
    :config
    (progn
      (setq projectile-require-project-root nil)
      (setq projectile-keymap-prefix (kbd "C-c p"))
      (setq projectile-completion-system 'default)
      (setq projectile-enable-caching t)
      (setq projectile-indexing-method 'alien)
      (add-to-list 'projectile-globally-ignored-files "node-modules"))
    :config
    (projectile-global-mode))
  (use-package helm-projectile
    :ensure t)
#+END_SRC

** Smooth scrolling

In order to disable the jumpy scrolling
#+BEGIN_SRC emacs-lisp
  (use-package smooth-scrolling
    :ensure t
    :init)
  (setq scroll-margin 5 scroll-conservatively 9999 scroll-step 1)
#+END_SRC

** Set default browser to uzbl

#+BEGIN_SRC emacs-lisp
  (setq browse-url-browser-function 'browse-url-generic
        browse-url-generic-program "uzbl")
#+END_SRC

* Links
** [[http://juanjoalvarez.net/es/detail/2014/sep/19/vim-emacsevil-chaotic-migration-guide/][Evil Migration Guide]]
** [[https://github.com/hrs/dotfiles/tree/master/emacs.d][Harry Schwartz Emacs Configuration]]
** [[http://pages.sachachua.com/.emacs.d/Sacha.html][Sacha Chua's Emacs Configuration]]
** [[https://spwhitton.name/blog/entry/eviltricks/][Evil Tricks]]
** [[https://github.com/aaronbieber/dotfiles/tree/master/configs/emacs.d/evil-rebellion][Aron Bieber Evil Rebelion]]
** [[http://doc.norang.ca/][Norang - Organize Your Life in Plain Text]]
* Configure ido (disabled)

#+BEGIN_SRC emacs-lisp
;  (setq ido-enable-flex-matching t)
;  (setq ido-everywhere t)
;  (ido-mode 1)
;  (ido-ubiquitous)
;  (flx-ido-mode 1) ; better/faster matching
;  (setq ido-create-new-buffer 'always) ; don't confirm to create new buffers
;  (ido-vertical-mode 1)
;  (setq ido-vertical-define-keys 'C-n-and-C-p-only)
#+END_SRC

