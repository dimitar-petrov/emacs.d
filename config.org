#+TITLE:Emacs Configuration
#+AUTHOR:Dimitar Petrov
#+STARTUP: overview

* Personal Information

#+BEGIN_SRC emacs-lisp
  (setq user-full-name "Dimitar Petrov"
        user-mail-address "petrov.dimp@gmail.com")
#+END_SRC

* Initializa MELPA

#+BEGIN_SRC emacs-lisp
    (when (>= emacs-major-version 24)
      (setq-default
       load-prefer-newer t
       package-enable-at-startup nil)
      (package-initialize)
      (add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/") t)
      (add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/") t)
      (unless (package-installed-p 'delight)
        (package-refresh-contents)
        (package-install 'delight))
      (unless (package-installed-p 'use-package)
        (package-refresh-contents)
        (package-install 'use-package)))
#+END_SRC

* Define Personal Functions  
** Tone Down Fringes
#+BEGIN_SRC emacs-lisp
  ;; Function
  (defun my-tone-down-fringes ()
    "Changes the leader background to be the same as THEME background color."
    (set-face-attribute 'fringe nil
                        :foreground (face-foreground 'default)
                        :background (face-background 'default)))
#+END_SRC

* Themes
** Use fancy lambdas

#+BEGIN_SRC emacs-lisp
  (global-prettify-symbols-mode t)
#+END_SRC

** Cyberpunk theme

The cyberpunk theme is dark and colorful. The code bellow removes the boxes around the modeline
#+BEGIN_SRC emacs-lisp
(use-package cyberpunk-theme
  :if (window-system)
  :ensure t
  :init
  (progn
    (set-face-attribute `mode-line nil
                        :box nil)
    (set-face-attribute `mode-line-inactive nil
                        :box nil)))
#+END_SRC

** Solarized theme

Here's some configuration for bbatsov's solarized themes.
#+BEGIN_SRC emacs-lisp
  (use-package solarized-theme
    :defer 10
    :init
    (setq solarized-use-variable-pith nil)
    :ensure t)
#+END_SRC

** Monokai theme

#+BEGIN_SRC emacs-lisp
  (use-package monokai-theme
    :ensure t
    :init
    (setq monokai-use-variable-pitch nil))
#+END_SRC

** Waher theme

#+BEGIN_SRC emacs-lisp
    (use-package waher-theme
      :if (window-system)
      :ensure t
      :init)
#+END_SRC

** Zenburn theme
   
#+BEGIN_SRC emacs-lisp
  (use-package zenburn-theme
    :ensure t
    :init)
#+END_SRC

** Spacemacs theme

#+BEGIN_SRC emacs-lisp
   (use-package spacemacs-theme
        :ensure t
        :defer t
        )
#+END_SRC

** Convenient theme functions

#+BEGIN_SRC emacs-lisp
      (defun switch-theme (theme)
        "Disables any currently active themes and loads THEME."
        ;; This interactive call is taken from `load-theme'
        (interactive
         (list
          (intern (completing-read "Load custom theme: "
                                   (mapc 'symbol-name
                                         (custom-available-themes))))))
        (let ((enabled-themes custom-enabled-themes))
          (mapc #'disable-theme custom-enabled-themes)
          (load-theme theme t))
        (my-tone-down-fringes)
  )

  (switch-theme 'solarized-dark)
;;  (switch-theme 'spacemacs-theme)

      (defun disable-active-themes ()
        "Disables any currently active themes listed in `custom-enabled-themes'."
        (interactive)
        (mapc #'disable-theme custom-enabled-themes))

      (bind-key "s-<f12>" 'switch-theme)
      (bind-key "s-<f11>" 'disable-active-themes)
#+END_SRC

* Font

Source Code Pro is a nice monospaced font.
Here is how we tell Emacs to use the font we want to use.
#+BEGIN_SRC emacs-lisp
  (add-to-list 'default-frame-alist
               '(font . "Source Code Pro-10"))
#+END_SRC

* Evil Mode
** Leader key
In oder to define and use a <leader> prefix for your personal shortcuts you have to install the package evil-leader. In order to work on all buffers (*messages*/*scratch*), evil-leader has to be loaded before evil. [[https://github.com/cofi/evil-leader/issues/10][Evil-leader issue in generic buffers]]

#+BEGIN_SRC emacs-lisp
  (use-package evil-leader
    :ensure t)
  (setq evil-leader/in-all-states 1)
  (global-evil-leader-mode)
  (evil-leader/set-leader ",")
#+END_SRC

** Load evil package and enable evil-mode

 #+BEGIN_SRC emacs-lisp
   (use-package evil
     :ensure t
     :init)
   (require 'evil)
   (evil-mode t)
 #+END_SRC

** Load evil-surround

#+BEGIN_SRC emacs-lisp
  (use-package evil-surround
    :ensure t)
  (global-evil-surround-mode 1)
#+END_SRC

** Use escape to get out of as much stuff as possible.

#+BEGIN_SRC emacs-lisp
    (bind-key "<escape>" 'isearch-cancel isearch-mode-map)
    (define-key minibuffer-local-map (kbd "ESC") 'abort-recursive-edit)
    (define-key minibuffer-local-ns-map (kbd "ESC") 'abort-recursive-edit)
    (define-key minibuffer-local-completion-map (kbd "ESC") 'abort-recursive-edit)
    (define-key minibuffer-local-must-match-map (kbd "ESC") 'abort-recursive-edit)
    (define-key minibuffer-local-isearch-map (kbd "ESC") 'abort-recursive-edit)
  ;  (bind-key "<escape>" 'helm-keyboard-quit helm-map)
  ;  (bind-key "<escape>" 'helm-keyboard-quit helm-comp-read-map)

  ;; Make movement keys work like they should
  (define-key evil-normal-state-map (kbd "<remap> <evil-next-line>") 'evil-next-visual-line)
  (define-key evil-normal-state-map (kbd "<remap> <evil-previous-line>") 'evil-previous-visual-line)
  (define-key evil-motion-state-map (kbd "<remap> <evil-next-line>") 'evil-next-visual-line)
  (define-key evil-motion-state-map (kbd "<remap> <evil-previous-line>") 'evil-previous-visual-line)

  ; Make horizontal movement cross lines                                    
  (setq-default evil-cross-lines t)
#+END_SRC

** Rebinding window navigation in Evil mode in emacs

#+BEGIN_SRC emacs-lisp
    (eval-after-load "evil"
      '(progn
;;         (define-key evil-normal-state-map (kbd "C-j") 'evil-window-down)
;;         (define-key evil-normal-state-map (kbd "C-l") 'evil-window-right)
;;         (define-key evil-motion-state-map (kbd "C-j") 'evil-window-down)
;;         (define-key evil-motion-state-map (kbd "C-l") 'evil-window-right)
         (evil-leader/set-key "k" 'evil-window-next)
         (evil-leader/set-key "j" 'evil-window-prev)
         (evil-leader/set-key "f" 'org-agenda-filter-by-tag)
         (evil-leader/set-key "a" 'org-table-move-row-up)
         (evil-leader/set-key "s" 'org-table-move-row-down)
         (evil-leader/set-key "B" 'org-agenda-bulk-action)))

#+END_SRC

** #Commented
#** FIX: Org mode with Evil fails cycle with TAB in terminal emacs 
#
##+BEGIN_SRC emacs-lisp
#  (add-hook 'org-mode-hook
#            (lambda ()
#              (define-key evil-normal-state-map (kbd "TAB") 'org-cycle)))
##+END_SRC

** Bindings for Evil and Org-mode

#+BEGIN_SRC emacs-lisp
  (dolist (state '(normal visual))
;    (evil-define-key state org-mode-map (kbd "C-j") 'org-metadown)
;    (evil-define-key state org-mode-map (kbd "C-k") 'org-metaup)
    (evil-define-key state org-mode-map (kbd "<") 'org-metaleft)
    (evil-define-key state org-mode-map (kbd ">") 'org-metaright)
;    (evil-define-key state org-mode-map (kbd "M-h") 'org-metaleft)
;    (evil-define-key state org-mode-map (kbd "M-l") 'org-metaright)
    (evil-define-key state org-mode-map (kbd "M-J") 'org-shiftmetadown)
    (evil-define-key state org-mode-map (kbd "M-K") 'org-shiftmetaup)
    (evil-define-key state org-mode-map (kbd "M-H") 'org-shiftmetaleft)
    (evil-define-key state org-mode-map (kbd "M-L") 'org-shiftmetaright)
    (evil-define-key state org-mode-map (kbd "^") 'org-beginning-of-line)
    (evil-define-key state org-mode-map (kbd "$") 'org-end-of-line))

  (evil-define-key 'normal org-mode-map (kbd "<tab>") 'org-cycle)

;  (bind-key "J" 'org-agenda-goto-date org-agenda-mode-map)
;  (bind-key "j" 'evil-next-line org-agenda-mode-map)
;  (bind-key "k" 'evil-previous-line org-agenda-mode-map)

  ;;; evil surround pairs

  (defun evil-surround-org-pairs ()
    (push '(?= . ("=" . "=")) evil-surround-pairs-alist)
    (push '(?~ . ("~" . "~")) evil-surround-pairs-alist))

  (add-hook 'org-mode-hook 'evil-surround-org-pairs)

  ;;; get out of editing a source block

  (add-hook 'org-src-mode-map (lambda () (evil-local-set-key 'normal (kbd "Z Z") 'org-edit-src-exit)))
#+END_SRC

** Display relative numbers for the current buffer

#+BEGIN_SRC emacs-lisp
  (use-package relative-line-numbers
    :ensure t
    :init)
  (global-relative-line-numbers-mode)

  (defun relative-abs-line-numbers-format (offset)
    "The default formatting function.
  Return the absolute value of OFFSET, converted to string."
    (if (= 0 offset)
        (number-to-string (line-number-at-pos))
      (number-to-string (abs offset))))

  (setq relative-line-numbers-format 'relative-abs-line-numbers-format)
#+END_SRC

*** Disable line numbers in org-mode

#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook (lambda () (relative-line-numbers-mode 0)))
#+END_SRC

*** Define Leader shortcuts 
    
#+BEGIN_SRC emacs-lisp
  (evil-leader/set-key "l" 'evil-next-buffer)
  (evil-leader/set-key "h" 'evil-prev-buffer)
#+END_SRC


** Org-agenda Vim Keybindings                                  :orgmode:evil:

 #+BEGIN_SRC emacs-lisp
   (add-to-list 'evil-motion-state-modes 'org-agenda-mode)

   (eval-after-load 'org-agenda
    '(progn
       (evil-set-initial-state 'org-agenda-mode 'normal)
       (evil-define-key 'normal org-agenda-mode-map
         (kbd "<RET>") 'org-agenda-switch-to
         (kbd "\t") 'org-agenda-goto

         "q" 'org-agenda-quit
         "r" 'org-agenda-redo
         "S" 'org-save-all-org-buffers
         "gj" 'org-agenda-goto-date
         "gJ" 'org-agenda-clock-goto
         "gm" 'org-agenda-bulk-mark
         "go" 'org-agenda-open-link
         "s" 'org-agenda-schedule
         "+" 'org-agenda-priority-up
         "," 'org-agenda-priority
         "-" 'org-agenda-priority-down
         "y" 'org-agenda-todo-yesterday
         "n" 'org-agenda-add-note
         "t" 'org-agenda-todo
         ":" 'org-agenda-set-tags
         ";" 'org-timer-set-timer
         "I" 'helm-org-task-file-headings
         "i" 'org-agenda-clock-in-avy
         "O" 'org-agenda-clock-out-avy
         "u" 'org-agenda-bulk-unmark
         "x" 'org-agenda-exit
         "j"  'org-agenda-next-line
         "k"  'org-agenda-previous-line
         "vt" 'org-agenda-toggle-time-grid
         "va" 'org-agenda-archives-mode
         "vw" 'org-agenda-week-view
         "vl" 'org-agenda-log-mode
         "vd" 'org-agenda-day-view
         "vc" 'org-agenda-show-clocking-issues
         "g/" 'org-agenda-filter-by-tag
         "o" 'delete-other-windows
         "gh" 'org-agenda-holiday
         "gv" 'org-agenda-view-mode-dispatch
         "f" 'org-agenda-later
         "b" 'org-agenda-earlier
         "c" 'helm-org-capture-templates
         "e" 'org-agenda-set-effort
         "n" nil  ; evil-search-next
         "{" 'org-agenda-manipulate-query-add-re
         "}" 'org-agenda-manipulate-query-subtract-re
         "A" 'org-agenda-toggle-archive-tag
         "." 'org-agenda-goto-today
         "0" 'evil-digit-argument-or-evil-beginning-of-line
         "<" 'org-agenda-filter-by-category
         ">" 'org-agenda-date-prompt
         "F" 'org-agenda-follow-mode
         "D" 'org-agenda-deadline
         "H" 'org-agenda-holidays
         "J" 'org-agenda-next-date-line
         "K" 'org-agenda-previous-date-line
         "L" 'org-agenda-recenter
         "P" 'org-agenda-show-priority
         "R" 'org-agenda-clockreport-mode
         "Z" 'org-agenda-sunrise-sunset
         "T" 'org-agenda-show-tags
         "X" 'org-agenda-clock-cancel
         "[" 'org-agenda-manipulate-query-add
         "g\\" 'org-agenda-filter-by-tag-refine
         "]" 'org-agenda-manipulate-query-subtract)))

 #+END_SRC

* Org Mode 
** Install latest org-mode

#+BEGIN_SRC emacs-lisp
  (use-package org
    :mode (("\\.org$" . org-mode))
    :ensure org-plus-contrib
    )

  ;; org-mode is the default mode for .org, .org_archive, and .txt files.
  (add-to-list 'auto-mode-alist '("\\.\\(org\\|org_archive\\|txt\\)$" . org-mode))
#+END_SRC

** Display Preferences
Display an outline of pretty bullets instead of list of asterisks

#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :ensure t)
  (require 'org-bullets)
  (add-hook 'org-mode-hook
            (lambda ()
              (org-bullets-mode t)))
  (setq org-hide-leading-stars t)

  (require 'ox-latex)
#+END_SRC

Also change the usual ellipsis(...) with a little downward-pointing that org displays when there is stuff under a header
#+BEGIN_SRC emacs-lisp
  (setq org-ellipsis "⤵")
#+END_SRC
Use syntax highlighting in source blocks while editing.
#+BEGIN_SRC emacs-lisp
(setq org-src-fontify-natively t)
#+END_SRC

** Org Modules

#+BEGIN_SRC emacs-lisp
  ; Enable habit tracking (and a bunch of other modules)
  (setq org-modules '(
                      org-habit
                      org-bbdb
                      org-bibtex
                      org-crypt
                      org-gnus
                      org-id
                      org-info
                      org-inlinetask
                      org-irc
                      org-mew
                      org-mhe
                      org-protocol
                      org-rmail
                      org-w3m
                      ))

  (eval-after-load 'org
    '(org-load-modules-maybe t))

  (setq org-expiry-inactive-timestamps t)

  ; position the habit graph on the agenda to the right of the default
  (setq org-habit-graph-column 50)

#+END_SRC

** Keybindings
   
#+BEGIN_SRC emacs-lisp
    (global-set-key "\C-cl" 'org-store-link)
  ;;  (global-set-key "\C-ca" 'org-agenda)
    (global-set-key "\C-cc" 'org-capture)
    (global-set-key "\C-cb" 'org-iswitchb)
    (global-set-key (kbd "<f12>") 'org-agenda)
    (global-set-key (kbd "<f11>") 'org-clock-goto)
    (global-set-key (kbd "<f9>") 'org-search-view)
#+END_SRC

** Checklist handling (norang)
There's a contributed org-checklist that can unckeck the boxes automatically when task is marked done

#+BEGIN_SRC emacs-lisp
  (require 'org-checklist)
#+END_SRC

** COMMENT Add Org-Pomodoro 

;;You can start a pomodoro for the task at point or select one from the last tasks that you clocked time for. Each clocked-in pomodoro starts a timer of 25 minutes and after each pomodoro break timer of 5 minutes is started ;;automatically. Every 4 breaks long break is started with 20 minutes. All values are customizable.
;;#+BEGIN_SRC emacs-lisp
;;  (use-package org-pomodoro
;;    :ensure t)
;;#+END_SRC

** Clocking (norang)
   
#+BEGIN_SRC emacs-lisp
  ;;
  ;; Resume clocking task when emacs is restarted
  (org-clock-persistence-insinuate)
  ;;
  ;; Show lot of clocking history so it's easy to pick items off the C-F11 list
  (setq org-clock-history-length 23)
  ;; Resume clocking task on clock-in if the clock is open
  (setq org-clock-in-resume t)
  ;; Change tasks to NEXT when clocking in
  (setq org-clock-in-switch-to-state 'dp/clock-in-to-next)
  ;; Separate drawers for clocking and logs
  (setq org-drawers (quote ("PROPERTIES" "LOGBOOK")))
  ;; Save clock data and state changes and notes in the LOGBOOK drawer
  (setq org-clock-into-drawer t)
  ;; Sometimes I change tasks I'm clocking quickly - this removes clocked tasks with 0:00 duration
  (setq org-clock-out-remove-zero-time-clocks t)
  ;; Clock out when moving task to a done state
  (setq org-clock-out-when-done t)
  ;; Save the running clock and all clock history when exiting Emacs, load it on startup
  (setq org-clock-persist t)
  ;; Do not prompt to resume an active clock
  (setq org-clock-persist-query-resume nil)
  ;; Enable auto clock resolution for finding open clocks
  (setq org-clock-auto-clock-resolution (quote when-no-clock-is-running))
  ;; Include current clocking task in clock reports
  (setq org-clock-report-include-clocking-task t)

  (setq dp/keep-clock-running nil)

  (defun dp/clock-in-to-next (kw)
    "Switch a task from TODO to NEXT when clocking in.
  Skips capture tasks, projects, and subprojects.
  Switch projects and subprojects from NEXT back to TODO"
    (when (not (and (boundp 'org-capture-mode) org-capture-mode))
      (cond
       ((and (member (org-get-todo-state) (list "TODO"))
             (dp/is-task-p))
        "NEXT")
       ((and (member (org-get-todo-state) (list "NEXT"))
             (dp/is-project-p))
        "TODO"))))

  (defun dp/find-project-task ()
    "Move point to the parent (project) task if any"
    (save-restriction
      (widen)
      (let ((parent-task (save-excursion (org-back-to-heading 'invisible-ok) (point))))
        (while (org-up-heading-safe)
          (when (member (nth 2 (org-heading-components)) org-todo-keywords-1)
            (setq parent-task (point))))
        (goto-char parent-task)
        parent-task)))

  (defun dp/punch-in (arg)
    "Start continuous clocking and set the default task to the
  selected task.  If no task is selected set the Organization task
  as the default task."
    (interactive "p")
    (setq dp/keep-clock-running t)
    (if (equal major-mode 'org-agenda-mode)
        ;;
        ;; We're in the agenda
        ;;
        (let* ((marker (org-get-at-bol 'org-hd-marker))
               (tags (org-with-point-at marker (org-get-tags-at))))
          (if (and (eq arg 4) tags)
              (org-agenda-clock-in '(16))
            (dp/clock-in-organization-task-as-default)))
      ;;
      ;; We are not in the agenda
      ;;
      (save-restriction
        (widen)
        ; Find the tags on the current task
        (if (and (equal major-mode 'org-mode) (not (org-before-first-heading-p)) (eq arg 4))
            (org-clock-in '(16))
          (dp/clock-in-organization-task-as-default)))))

  (defun dp/punch-out ()
    (interactive)
    (setq dp/keep-clock-running nil)
    (when (org-clock-is-active)
      (org-clock-out))
    (org-agenda-remove-restriction-lock))

  (defun dp/clock-in-default-task ()
    (save-excursion
      (org-with-point-at org-clock-default-task
        (org-clock-in))))

  (defun dp/clock-in-parent-task ()
    "Move point to the parent (project) task if any and clock in"
    (let ((parent-task))
      (save-excursion
        (save-restriction
          (widen)
          (while (and (not parent-task) (org-up-heading-safe))
            (when (member (nth 2 (org-heading-components)) org-todo-keywords-1)
              (setq parent-task (point))))
          (if parent-task
              (org-with-point-at parent-task
                (org-clock-in))
            (when dp/keep-clock-running
              (dp/clock-in-default-task)))))))

  (defvar dp/organization-task-id "efe0217b-425f-4de2-a1a7-293d3dd68cd7")

  (defun dp/clock-in-organization-task-as-default ()
    (interactive)
    (org-with-point-at (org-id-find dp/organization-task-id 'marker)
      (org-clock-in '(16))))

  (defun dp/clock-out-maybe ()
    (when (and dp/keep-clock-running
               (not org-clock-clocking-in)
               (marker-buffer org-clock-default-task)
               (not org-clock-resolving-clocks-due-to-idleness))
      (dp/clock-in-parent-task)))

  (add-hook 'org-clock-out-hook 'dp/clock-out-maybe 'append)

#+END_SRC
   
#+BEGIN_SRC emacs-lisp
  (require 'org-id)
  (defun dp/clock-in-task-by-id (id)
    "Clock in a task by id"
    (org-with-point-at (org-id-find id 'marker)
      (org-clock-in nil)))

  (defun dp/clock-in-last-task (arg)
    "Clock in the interrupted task if there is one
  Skip the default task and get the next one.
  A prefix arg forces clock in of the default task."
    (interactive "p")
    (let ((clock-in-to-task
           (cond
            ((eq arg 4) org-clock-default-task)
            ((and (org-clock-is-active)
                  (equal org-clock-default-task (cadr org-clock-history)))
             (caddr org-clock-history))
            ((org-clock-is-active) (cadr org-clock-history))
            ((equal org-clock-default-task (car org-clock-history)) (cadr org-clock-history))
            (t (car org-clock-history)))))
      (widen)
      (org-with-point-at clock-in-to-task
        (org-clock-in nil))))

#+END_SRC

#+BEGIN_SRC emacs-lisp
  ;; Agenda clock report parameters
  (setq org-agenda-clockreport-parameter-plist
         (quote (:link t :maxlevel 5 :fileskip0 t :compact t :narrow 80)))
#+END_SRC

The following setup is removing the empty LOGBOOK drawers if they occur

#+BEGIN_SRC emacs-lisp
  ;; Remove empty LOGBOOK drawers on clock out
  (defun dp/remove-empty-drawer-on-clock-out ()
    (interactive)
    (save-excursion
      (beginning-of-line 0)
      (org-remove-empty-drawer-at (point))))

  (add-hook 'org-clock-out-hook 'dp/remove-empty-drawer-on-clock-out 'append)

#+END_SRC

** Next is for tasks

#+BEGIN_SRC emacs-lisp
  (defun dp/mark-next-parent-tasks-todo ()
    "Visit each parent task and change NEXT states to TODO"
    (let ((mystate (or (and (fboundp 'org-state)
                            state)
                       (nth 2 (org-heading-components)))))
      (when mystate
        (save-excursion
          (while (org-up-heading-safe)
            (when (member (nth 2 (org-heading-components)) (list "NEXT"))
              (org-todo "TODO")))))))

  (add-hook 'org-after-todo-state-change-hook 'dp/mark-next-parent-tasks-todo 'append)
  (add-hook 'org-clock-in-hook 'dp/mark-next-parent-tasks-todo 'append)
#+END_SRC

** Editing source code
I do not want to get distracted by the same code in the other window, so i want org src to use the current window.

#+BEGIN_SRC emacs-lisp
  (setq org-src-window-setup 'current-window)
#+END_SRC

** Setting up default files
   The following sets a default target file for notes, and defines a global key for capturing new material.

#+BEGIN_SRC emacs-lisp
  ;; Set to the location of my Org files on the NFS Share
  (setq org-directory "/media/rdisk/new_tree/SelfImprover/OrgModeRepo")

  (setq org-default-notes-file (concat org-directory "/notes.org"))

  ;; Capture templates for: TODO tasks, Notes, appointments, phone calls, meetings, and org-protocol
  (setq org-capture-templates
        (quote (("t" "Todo" entry (file
                                   (concat org-directory "/NixOrg/refile.org"))
                 "* TODO %?\n%U\n%a\n" :clock-in t :clock-resume t)
                ("r" "Respond" entry (file
                                      (concat org-directory "/NixOrg/refile.org"))
                 "* NEXT Respond to %:from on %:subject\nSCHEDULED: %t\n%U\n%a\n" :clock-in t :clock-resume t :immediate-finish t)
                ("n" "Note" entry (file
                                   (concat org-directory "/NixOrg/refile.org"))
                 "* %? :NOTE:\n%U\n%a\n" :clock-in t :clock-resume t)
                ("j" "Journal" entry (file+datetree 
                                      (concat org-directory "/NixOrg/journal.org"))
                 "* %?\n%[jnl.txt]\n%U\n" :clock-in t :clock-resume t)
                ("c" "Conditionning" entry (file+datetree 
                                      (concat org-directory "/NixOrg/journal.org"))
                 "* %?\n%[powerEval.txt]\n%U\n" :clock-in t :clock-resume t)
                ("w" "org-protocol" entry (file
                                           (concat org-directory "/NixOrg/refile.org"))
                 "* TODO Review %c\n%U\n" :immediate-finish t)
                ("m" "Meeting" entry (file
                                      (concat org-directory "/NixOrg/refile.org"))
                 "* MEETING with %? :MEETING:\n%U" :clock-in t :clock-resume t)
                ("p" "Phone call" entry (file
                                         (concat org-directory "/NixOrg/refile.org"))
                 "* PHONE %? :PHONE:\n%U" :clock-in t :clock-resume t)
                ("h" "Habit" entry (file
                                    (concat org-directory "/NixOrg/refile.org"))
                 "* NEXT %?\n%U\n%a\nSCHEDULED: %(format-time-string \"%<<%Y-%m-%d %a .+1d/3d>>\")\n:PROPERTIES:\n:STYLE: habit\n:REPEAT_TO_STATE: NEXT\n:END:\n"))))

  ;; Set up org-mobile-directory
  (setq org-mobile-directory (concat org-directory "/MobileOrg"))

  ;; Set to the name of the file where new notes will be stored
  (setq org-mobile-inbox-for-pull (concat org-directory "/NixOrg/flagged.org"))
#+END_SRC

** Org Agenda Configuration
   
#+BEGIN_SRC emacs-lisp
  (setq org-agenda-files
        (list (concat org-directory "/NixOrg")
              (concat org-directory "/NixOrg/roles")
              (concat org-directory "/NixOrg/amdocs")))

  (setq org-agenda-span 'day)
#+END_SRC

** Archiving 
   
#+BEGIN_SRC emacs-lisp
  (setq org-archive-mark-done nil)
  (setq org-archive-location "%s_archive::* Archived Tasks")

  (defun dp/skip-non-archivable-tasks ()
    "Skip trees that are not available for archiving"
    (save-restriction
      (widen)
      ;; Consider only tasks with done todo headings as archivable candidates
      (let ((next-headline (save-excursion (or (outline-next-heading) (point-max))))
            (subtree-end (save-excursion (org-end-of-subtree t))))
        (if (member (org-get-todo-state) org-todo-keywords-1)
            (if (member (org-get-todo-state) org-done-keywords)
                (let* ((daynr (string-to-int (format-time-string "%d" (current-time))))
                       (a-month-ago (* 60 60 24 (+ daynr 1)))
                       (last-month (format-time-string "%Y-%m-" (time-subtract (current-time) (seconds-to-time a-month-ago))))
                       (this-month (format-time-string "%Y-%m-" (current-time)))
                       (subtree-is-current (save-excursion
                                             (forward-line 1)
                                             (and (< (point) subtree-end)
                                                  (re-search-forward (concat last-month "\\|" this-month) subtree-end t)))))
                  (if subtree-is-current
                      subtree-end ; Has a date in this month or last month, skip it
                    nil))  ; available to archive
              (or subtree-end (point-max)))
          next-headline))))
#+END_SRC

** Project Helper Functions (norang)

#+BEGIN_SRC emacs-lisp
  (defun dp/is-project-p ()
    "Any task with a todo keyword subtask"
    (save-restriction
      (widen)
      (let ((has-subtask)
            (subtree-end (save-excursion (org-end-of-subtree t)))
            (is-a-task (member (nth 2 (org-heading-components)) org-todo-keywords-1)))
        (save-excursion
          (forward-line 1)
          (while (and (not has-subtask)
                      (< (point) subtree-end)
                      (re-search-forward "^\*+ " subtree-end t))
            (when (member (org-get-todo-state) org-todo-keywords-1)
              (setq has-subtask t))))
        (and is-a-task has-subtask))))

  (defun dp/is-project-subtree-p ()
    "Any task with a todo keyword that is in a project subtree.
  Callers of this function already widen the buffer view."
    (let ((task (save-excursion (org-back-to-heading 'invisible-ok)
                                (point))))
      (save-excursion
        (dp/find-project-task)
        (if (equal (point) task)
            nil
          t))))

  (defun dp/is-task-p ()
    "Any task with a todo keyword and no subtask"
    (save-restriction
      (widen)
      (let ((has-subtask)
            (subtree-end (save-excursion (org-end-of-subtree t)))
            (is-a-task (member (nth 2 (org-heading-components)) org-todo-keywords-1)))
        (save-excursion
          (forward-line 1)
          (while (and (not has-subtask)
                      (< (point) subtree-end)
                      (re-search-forward "^\*+ " subtree-end t))
            (when (member (org-get-todo-state) org-todo-keywords-1)
              (setq has-subtask t))))
        (and is-a-task (not has-subtask)))))

  (defun dp/is-subproject-p ()
    "Any task which is a subtask of another project"
    (let ((is-subproject)
          (is-a-task (member (nth 2 (org-heading-components)) org-todo-keywords-1)))
      (save-excursion
        (while (and (not is-subproject) (org-up-heading-safe))
          (when (member (nth 2 (org-heading-components)) org-todo-keywords-1)
            (setq is-subproject t))))
      (and is-a-task is-subproject)))

  (defun dp/list-sublevels-for-projects-indented ()
    "Set org-tags-match-list-sublevels so when restricted to a subtree we list all subtasks.
    This is normally used by skipping functions where this variable is already local to the agenda."
    (if (marker-buffer org-agenda-restrict-begin)
        (setq org-tags-match-list-sublevels 'indented)
      (setq org-tags-match-list-sublevels nil))
    nil)

  (defun dp/list-sublevels-for-projects ()
    "Set org-tags-match-list-sublevels so when restricted to a subtree we list all subtasks.
    This is normally used by skipping functions where this variable is already local to the agenda."
    (if (marker-buffer org-agenda-restrict-begin)
        (setq org-tags-match-list-sublevels t)
      (setq org-tags-match-list-sublevels nil))
    nil)

  (defvar dp/hide-scheduled-and-waiting-next-tasks t)

  (defun dp/toggle-next-task-display ()
    (interactive)
    (setq dp/hide-scheduled-and-waiting-next-tasks (not dp/hide-scheduled-and-waiting-next-tasks))
    (when  (equal major-mode 'org-agenda-mode)
      (org-agenda-redo))
    (message "%s WAITING and SCHEDULED NEXT Tasks" (if dp/hide-scheduled-and-waiting-next-tasks "Hide" "Show")))

  (defun dp/skip-stuck-projects ()
    "Skip trees that are not stuck projects"
    (save-restriction
      (widen)
      (let ((next-headline (save-excursion (or (outline-next-heading) (point-max)))))
        (if (dp/is-project-p)
            (let* ((subtree-end (save-excursion (org-end-of-subtree t)))
                   (has-next ))
              (save-excursion
                (forward-line 1)
                (while (and (not has-next) (< (point) subtree-end) (re-search-forward "^\\*+ NEXT " subtree-end t))
                  (unless (member "WAITING" (org-get-tags-at))
                    (setq has-next t))))
              (if has-next
                  nil
                next-headline)) ; a stuck project, has subtasks but no next task
          nil))))

  (defun dp/skip-non-stuck-projects ()
    "Skip trees that are not stuck projects"
    ;; (dp/list-sublevels-for-projects-indented)
    (save-restriction
      (widen)
      (let ((next-headline (save-excursion (or (outline-next-heading) (point-max)))))
        (if (dp/is-project-p)
            (let* ((subtree-end (save-excursion (org-end-of-subtree t)))
                   (has-next ))
              (save-excursion
                (forward-line 1)
                (while (and (not has-next) (< (point) subtree-end) (re-search-forward "^\\*+ NEXT " subtree-end t))
                  (unless (member "WAITING" (org-get-tags-at))
                    (setq has-next t))))
              (if has-next
                  next-headline
                nil)) ; a stuck project, has subtasks but no next task
          next-headline))))

  (defun dp/skip-non-projects ()
    "Skip trees that are not projects"
    ;; (dp/list-sublevels-for-projects-indented)
    (if (save-excursion (dp/skip-non-stuck-projects))
        (save-restriction
          (widen)
          (let ((subtree-end (save-excursion (org-end-of-subtree t))))
            (cond
             ((dp/is-project-p)
              nil)
             ((and (dp/is-project-subtree-p) (not (dp/is-task-p)))
              nil)
             (t
              subtree-end))))
      (save-excursion (org-end-of-subtree t))))

  (defun dp/skip-non-tasks ()
    "Show non-project tasks.
  Skip project and sub-project tasks, habits, and project related tasks."
    (save-restriction
      (widen)
      (let ((next-headline (save-excursion (or (outline-next-heading) (point-max)))))
        (cond
         ((dp/is-task-p)
          nil)
         (t
          next-headline)))))

  (defun dp/skip-project-trees-and-habits ()
    "Skip trees that are projects"
    (save-restriction
      (widen)
      (let ((subtree-end (save-excursion (org-end-of-subtree t))))
        (cond
         ((dp/is-project-p)
          subtree-end)
         ((org-is-habit-p)
          subtree-end)
         (t
          nil)))))

  (defun dp/skip-projects-and-habits-and-single-tasks ()
    "Skip trees that are projects, tasks that are habits, single non-project tasks"
    (save-restriction
      (widen)
      (let ((next-headline (save-excursion (or (outline-next-heading) (point-max)))))
        (cond
         ((org-is-habit-p)
          next-headline)
         ((and dp/hide-scheduled-and-waiting-next-tasks
               (member "WAITING" (org-get-tags-at)))
          next-headline)
         ((dp/is-project-p)
          next-headline)
         ((and (dp/is-task-p) (not (dp/is-project-subtree-p)))
          next-headline)
         (t
          nil)))))

  (defun dp/skip-project-tasks-maybe ()
    "Show tasks related to the current restriction.
  When restricted to a project, skip project and sub project tasks, habits, NEXT tasks, and loose tasks.
  When not restricted, skip project and sub-project tasks, habits, and project related tasks."
    (save-restriction
      (widen)
      (let* ((subtree-end (save-excursion (org-end-of-subtree t)))
             (next-headline (save-excursion (or (outline-next-heading) (point-max))))
             (limit-to-project (marker-buffer org-agenda-restrict-begin)))
        (cond
         ((dp/is-project-p)
          next-headline)
         ((org-is-habit-p)
          subtree-end)
         ((and (not limit-to-project)
               (dp/is-project-subtree-p))
          subtree-end)
         ((and limit-to-project
               (dp/is-project-subtree-p)
               (member (org-get-todo-state) (list "NEXT")))
          subtree-end)
         (t
          nil)))))

  (defun dp/skip-project-tasks ()
    "Show non-project tasks.
  Skip project and sub-project tasks, habits, and project related tasks."
    (save-restriction
      (widen)
      (let* ((subtree-end (save-excursion (org-end-of-subtree t))))
        (cond
         ((dp/is-project-p)
          subtree-end)
         ((org-is-habit-p)
          subtree-end)
         ((dp/is-project-subtree-p)
          subtree-end)
         (t
          nil)))))

  (defun dp/skip-non-project-tasks ()
    "Show project tasks.
  Skip project and sub-project tasks, habits, and loose non-project tasks."
    (save-restriction
      (widen)
      (let* ((subtree-end (save-excursion (org-end-of-subtree t)))
             (next-headline (save-excursion (or (outline-next-heading) (point-max)))))
        (cond
         ((dp/is-project-p)
          next-headline)
         ((org-is-habit-p)
          subtree-end)
         ((and (dp/is-project-subtree-p)
               (member (org-get-todo-state) (list "NEXT")))
          subtree-end)
         ((not (dp/is-project-subtree-p))
          subtree-end)
         (t
          nil)))))

  (defun dp/skip-projects-and-habits ()
    "Skip trees that are projects and tasks that are habits"
    (save-restriction
      (widen)
      (let ((subtree-end (save-excursion (org-end-of-subtree t))))
        (cond
         ((dp/is-project-p)
          subtree-end)
         ((org-is-habit-p)
          subtree-end)
         (t
          nil)))))

  (defun dp/skip-non-subprojects ()
    "Skip trees that are not projects"
    (let ((next-headline (save-excursion (outline-next-heading))))
      (if (dp/is-subproject-p)
          nil
        next-headline)))
#+END_SRC

** Custom agenda views (norang)
   
#+BEGIN_SRC emacs-lisp
  ;; Do not dim blocked tasks
  (setq org-agenda-dim-blocked-tasks nil)

  ;; Compact the block agenda view
  (setq org-agenda-compact-blocks t)

  ;; Custom agenda command definitions
  (setq org-agenda-custom-commands
        (quote (("N" "Notes" tags "NOTE"
                 ((org-agenda-overriding-header "Notes")
                  (org-tags-match-list-sublevels t)))
                ("h" "Habits" tags-todo "STYLE=\"habit\""
                 ((org-agenda-overriding-header "Habits")
                  (org-agenda-sorting-strategy
                   '(todo-state-down effort-up category-keep))))
                (" " "Agenda"
                 ((agenda "" nil)
                  (tags "REFILE"
                        ((org-agenda-overriding-header "Tasks to Refile")
                         (org-tags-match-list-sublevels nil)))
                  (tags-todo "-CANCELLED/!"
                             ((org-agenda-overriding-header "Stuck Projects")
                              (org-agenda-skip-function 'dp/skip-non-stuck-projects)
                              (org-agenda-sorting-strategy
                               '(category-keep))))
                  (tags-todo "-HOLD-CANCELLED/!"
                             ((org-agenda-overriding-header "Projects")
                              (org-agenda-skip-function 'dp/skip-non-projects)
                              (org-tags-match-list-sublevels 'indented)
                              (org-agenda-sorting-strategy
                               '(category-keep))))
                  (tags-todo "-CANCELLED/!NEXT"
                             ((org-agenda-overriding-header (concat "Project Next Tasks"
                                                                    (if dp/hide-scheduled-and-waiting-next-tasks
                                                                        ""
                                                                      " (including WAITING and SCHEDULED tasks)")))
                              (org-agenda-skip-function 'dp/skip-projects-and-habits-and-single-tasks)
                              (org-tags-match-list-sublevels t)
                              (org-agenda-todo-ignore-scheduled dp/hide-scheduled-and-waiting-next-tasks)
                              (org-agenda-todo-ignore-deadlines dp/hide-scheduled-and-waiting-next-tasks)
                              (org-agenda-todo-ignore-with-date dp/hide-scheduled-and-waiting-next-tasks)
                              (org-agenda-sorting-strategy
                               '(todo-state-down effort-up category-keep))))
                  (tags-todo "-REFILE-CANCELLED-WAITING-HOLD/!"
                             ((org-agenda-overriding-header (concat "Project Subtasks"
                                                                    (if dp/hide-scheduled-and-waiting-next-tasks
                                                                        ""
                                                                      " (including WAITING and SCHEDULED tasks)")))
                              (org-agenda-skip-function 'dp/skip-non-project-tasks)
                              (org-agenda-todo-ignore-scheduled dp/hide-scheduled-and-waiting-next-tasks)
                              (org-agenda-todo-ignore-deadlines dp/hide-scheduled-and-waiting-next-tasks)
                              (org-agenda-todo-ignore-with-date dp/hide-scheduled-and-waiting-next-tasks)
                              (org-agenda-sorting-strategy
                               '(category-keep))))
                  (tags-todo "-REFILE-CANCELLED-WAITING-HOLD/!"
                             ((org-agenda-overriding-header (concat "Standalone Tasks"
                                                                    (if dp/hide-scheduled-and-waiting-next-tasks
                                                                        ""
                                                                      " (including WAITING and SCHEDULED tasks)")))
                              (org-agenda-skip-function 'dp/skip-project-tasks)
                              (org-agenda-todo-ignore-scheduled dp/hide-scheduled-and-waiting-next-tasks)
                              (org-agenda-todo-ignore-deadlines dp/hide-scheduled-and-waiting-next-tasks)
                              (org-agenda-todo-ignore-with-date dp/hide-scheduled-and-waiting-next-tasks)
                              (org-agenda-sorting-strategy
                               '(category-keep))))
                  (tags-todo "-CANCELLED+WAITING|HOLD/!"
                             ((org-agenda-overriding-header (concat "Waiting and Postponed Tasks"
                                                                    (if dp/hide-scheduled-and-waiting-next-tasks
                                                                        ""
                                                                      " (including WAITING and SCHEDULED tasks)")))
                              (org-agenda-skip-function 'dp/skip-non-tasks)
                              (org-tags-match-list-sublevels nil)
                              (org-agenda-todo-ignore-scheduled dp/hide-scheduled-and-waiting-next-tasks)
                              (org-agenda-todo-ignore-deadlines dp/hide-scheduled-and-waiting-next-tasks)))
                  (tags "-REFILE/"
                        ((org-agenda-overriding-header "Tasks to Archive")
                         (org-agenda-skip-function 'dp/skip-non-archivable-tasks)
                         (org-tags-match-list-sublevels nil))))
                 nil))))

#+END_SRC

#+BEGIN_SRC emacs-lisp
  ; Overwrite the current window with the agenda
  (setq org-agenda-window-setup 'current-window)
#+END_SRC

** Keep tasks with timestamps visible on the global todo lists (norang)

#+BEGIN_SRC emacs-lisp
  ;; Keep tasks with dates on the global todo lists
  (setq org-agenda-todo-ignore-with-date nil)

  ;; Keep tasks with deadlines on the global todo lists
  (setq org-agenda-todo-ignore-deadlines nil)

  ;; Keep tasks with scheduled dates on the global todo lists
  (setq org-agenda-todo-ignore-scheduled nil)

  ;; Keep tasks with timestamps on the global todo lists
  (setq org-agenda-todo-ignore-timestamp nil)

  ;; Remove completed deadline tasks from the agenda view
  (setq org-agenda-skip-deadline-if-done t)

  ;; Remove completed scheduled tasks from the agenda view
  (setq org-agenda-skip-scheduled-if-done t)

  ;; Remove completed items from search results
  (setq org-agenda-skip-timestamp-if-done t) 
#+END_SRC

** Meeting Notes

#+BEGIN_SRC emacs-lisp
  (defun dp/prepare-meeting-notes ()
    "Prepare meeting notes for email
     Take selected region and convert tabs to spaces, mark TODOs with leading >>>, and copy to kill ring for pasting"
    (interactive)
    (let (prefix)
      (save-excursion
        (save-restriction
          (narrow-to-region (region-beginning) (region-end))
          (untabify (point-min) (point-max))
          (goto-char (point-min))
          (while (re-search-forward "^\\( *-\\\) \\(TODO\\|DONE\\): " (point-max) t)
            (replace-match (concat (make-string (length (match-string 1)) ?>) " " (match-string 2) ": ")))
          (goto-char (point-min))
          (kill-ring-save (point-min) (point-max))))))
#+END_SRC

** Review agenda views

#+BEGIN_SRC emacs-lisp
  ;; define "R" as the prefix key for reviewing what happened in various
  ;; time periods
  (add-to-list 'org-agenda-custom-commands
               '("R" . "Review" )
               )

  ;; Common settings for all reviews
  (setq dp/org-agenda-review-settings
        '(
  ;;        (org-agenda-files '("~/org/notes.org"
  ;;                            "~/org/projects.org"
  ;;                            ))
          (org-agenda-show-all-dates t)
          (org-agenda-start-with-log-mode t)
          (org-agenda-start-with-clockreport-mode t)
          (org-agenda-archives-mode t)
          ;; I don't care if an entry was archived
          (org-agenda-hide-tags-regexp
           (concat org-agenda-hide-tags-regexp
                   "\\|ARCHIVE"))
        ))
  ;; Show the agenda with the log turn on, the clock table show and
  ;; archived entries shown.  These commands are all the same exept for
  ;; the time period.
  (add-to-list 'org-agenda-custom-commands
               `("Rw" "Week in review"
                  agenda ""
                  ;; agenda settings
                  ,(append
                    dp/org-agenda-review-settings
                    '((org-agenda-span 'week)
                      (org-agenda-start-on-weekday 0)
                      (org-agenda-overriding-header "Week in Review"))
                    )
                  (concat org-directory "/review/week.html")
                  ))


  (add-to-list 'org-agenda-custom-commands
               `("Rd" "Day in review"
                  agenda ""
                  ;; agenda settings
                  ,(append
                    dp/org-agenda-review-settings
                    '((org-agenda-span 'day)
                      (org-agenda-overriding-header "Week in Review"))
                    )
                  (concat org-directory "/review/day.html")
                  ))

  (add-to-list 'org-agenda-custom-commands
               `("Rm" "Month in review"
                  agenda ""
                  ;; agenda settings
                  ,(append
                    dp/org-agenda-review-settings
                    '((org-agenda-span 'month)
                      (org-agenda-start-day "01")
                      (org-read-date-prefer-future nil)
                      (org-agenda-overriding-header "Month in Review"))
                    )
                  (concat org-directory "/review/month.html")
                  ))

#+END_SRC

** Configure org-refile

#+BEGIN_SRC emacs-lisp
  (setq org-refile-targets '((org-agenda-files . (:maxlevel . 6))))
#+END_SRC

** Logging stuff
#+BEGIN_SRC emacs-lisp
  (setq org-log-done (quote time))
  (setq org-log-into-drawer t)
  (setq org-log-state-notes-insert-after-drawers nil)

  (setq org-todo-keywords
        (quote ((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d)")
                (sequence "WAITING(w@/!)" "HOLD(h@/!)" "|" "CANCELLED(c@/!)" "PHONE" "MEETING"))))

  (setq org-todo-keyword-faces
        (quote (("TODO" :foreground "red" :weight bold)
                ("NEXT" :foreground "blue" :weight bold)
                ("DONE" :foreground "forest green" :weight bold)
                ("WAITING" :foreground "orange" :weight bold)
                ("HOLD" :foreground "magenta" :weight bold)
                ("CANCELLED" :foreground "forest green" :weight bold)
                ("MEETING" :foreground "yellow" :weight bold)
                ("PHONE" :foreground "yellow" :weight bold))))
#+END_SRC

** Tags (norang)
#+BEGIN_SRC emacs-lisp
  ; Tags with fast selection keys
  (setq org-tag-alist (quote ((:startgroup)
                              ("@errand" . ?e)
                              ("@office" . ?o)
                              ("@home" . ?H)
                              ("@field" . ?f)
                              (:endgroup)
                              ("WAITING" . ?w)
                              ("HOLD" . ?h)
                              ("PERSONAL" . ?P)
                              ("WORK" . ?W)
                              ("MANAGER" . ?M)
                              ("FIELD" . ?F)
                              ("ORG" . ?O)
                              ("NORANG" . ?N)
                              ("crypt" . ?E)
                              ("NOTE" . ?n)
                              ("CANCELLED" . ?c)
                              ("SERGEY" . ?S)
                              ("ALEXEY" . ?A)
                              ("IVAN" . ?I)
                              ("DEPLOYMENT" . ?D)
                              ("BELIEF" . ?B)
                              ("FLAGGED" . ??))))

  ; Allow setting single tags without the menu
  (setq org-fast-tag-selection-single-key (quote expert))

  ; For tag searches ignore tasks with scheduled and deadline dates
  (setq org-agenda-tags-todo-honor-ignore-options t)

#+END_SRC

* Yaml Mode

Install and enable yaml mode

#+BEGIN_SRC emacs-lisp
  (use-package yaml-mode
    :ensure t)

  (add-hook 'yaml-mode-hook
            (lambda ()
              (define-key yaml-mode-map "\C-m" 'newline-and-indent)))
#+END_SRC  

* Latex Mode
** Export with xelatex

#+BEGIN_SRC emacs-lisp
  ;; Use xelatex for PDF export
  ;;(setq texcmd "latexmk -pdflatex=xelatex -pdf -quiet %f")

  ;; LaTeX compilation command
  ;;(setq org-latex-pdf-process (list texcmd))

  ;; Another solution
  (setq org-export-dispatch-use-expert-ui t ; non-intrusive export dispatch
          org-latex-pdf-process               ; for regular export
          '("xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"
            "xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"
            "xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  ;; For export to latex I use the following setting to get fontified listings from source blocks:
  (setq org-latex-listings t)
#+END_SRC

** Report Export Class

#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-latex-classes
            '("dp-report"
               "\\documentclass{report}
  \\usepackage{fontspec}
  \\usepackage[bulgarian,english]{babel}
  \\usepackage{hyperref}
  \\usepackage{fancyhdr}
  \\usepackage{listings}
  \\usepackage{titlesec}
  \\usepackage{graphics}
  \\usepackage{fancyhdr}
  \\usepackage{lmodern}
  \\usepackage{geometry}
  \\usepackage{longtable}
  \\setmainfont{CMU Serif}
  \\geometry{
		a4paper,
		total={210mm,297mm},
		left=20mm,
		right=20mm,
		top=20mm,
		bottom=15mm,
    }
  \\pagestyle{fancy}
  \\fancyhf{}
  \\renewcommand{\\sectionmark}[1]{\\markright{#1}}
  \\fancyhead[R]{Page \\thepage}
  \\fancyhead[L]{\\rightmark}
  \\fancyfoot[C]{\\emph{Proprietary and Confidential}} 
  [NO-DEFAULT-PACKAGES]
  [NO-PACKAGES]
  [EXTRA]"
               ("\\section{%s}" . "\\section*{%s}")
               ("\\subsection{%s}" . "\\subsection*{%s}")
               ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
               ("\\paragraph{%s}" . "\\paragraph*{%s}")
               ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (setq org-latex-hyperref-template "\\hypersetup{
  pdfauthor={%a},
  pdftitle={%t},
  pdfkeywords={%k},
  pdfsubject={%d},
  pdfcreator={%c},
  pdflang={%L},
  colorlinks=true,
  linktoc=all,
  linkcolor=blue,
  }\n"
        )

#+END_SRC

** Evince for PDF Files
   
#+BEGIN_SRC emacs-lisp
  ;; PDFs visited in Org-mode are opened in Evince (and not in the default choice) http://stackoverflow.com/a/8836108/789593
  (add-hook 'org-mode-hook
        '(lambda ()
           (delete '("\\.pdf\\'" . default) org-file-apps)
           (add-to-list 'org-file-apps '("\\.pdf\\'" . "evince %s"))))
#+END_SRC

* Use smex to handle M-x with ido

#+BEGIN_SRC emacs-lisp
  (use-package smex
    :ensure t)

  (smex-initialize)
  (global-set-key (kbd "M-x") 'smex)
  (global-set-key (kbd "M-X") 'smex-major-mode-commands)
#+END_SRC

* General configuration
** Turn off bars

#+BEGIN_SRC emacs-lisp
  (menu-bar-mode -1)
  (toggle-scroll-bar -1)
  (tool-bar-mode -1)
#+END_SRC

** Disable emacs welcome screen
   
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t)
#+END_SRC

** Adjust windows margins

#+BEGIN_SRC emacs-lisp
  (setq-default left-margin-width 0 right-margin-width 0) ; Define new widths.
   (set-window-buffer nil (current-buffer)) ; Use them now.
#+END_SRC

** Sane defaults

Some default configurations
#+BEGIN_SRC emacs-lisp
  ;; Answering just 'y' or 'n' will do
  (defalias 'yes-or-no-p 'y-or-n-p)

  ;; Turn off the blinking cursor
  (blink-cursor-mode -1)

#+END_SRC
 
Enable line highlight

#+BEGIN_SRC emacs-lisp
  (global-hl-line-mode t)
#+END_SRC

Disable Indent-Tabs-mode
#+BEGIN_SRC emacs-lisp
  (setq-default indent-tabs-mode nil)
  (setq-default tab-width 2)
#+END_SRC

** Backups
This is one of the things people usually want to change right away. Emacs saves backup files in the current directory.
 #+BEGIN_SRC emacs-lisp
   (setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
 #+END_SRC

** HTTP

#+BEGIN_SRC emacs-lisp
  (use-package ob-http
    :ensure t)
#+END_SRC

** Diagrams and graphics
Graphviz and Ditaa make it easier to create diagrams from Emacs. See http://sachachua.com/evil-plans for examples and source. 

#+BEGIN_SRC emacs-lisp
  (setq org-ditaa-jar-path "/usr/share/java/ditaa/ditaa-0_9.jar")
  (setq org-startup-with-inline-images t)
  (use-package org
    :config
    (progn
      (add-hook 'org-babel-after-execute-hook 'org-display-inline-images)
      (org-babel-do-load-languages
       'org-babel-load-languages
       '((dot . t)
         (ditaa . t)
         (sh . t)
         (http . t)
         (perl . t)
         (python . t)
         (R . t)))
      (add-to-list 'org-src-lang-modes '("dot" . graphviz-dot))))
#+END_SRC

** Powerline

#+BEGIN_SRC emacs-lisp
  (use-package powerline
    :ensure t)
  (require 'powerline)
  (powerline-vim-theme)
  (display-time-mode t)
#+END_SRC

** Helm-interactive completion
   
Help makes it easy to complete various things. I find it to be easier to configure that ido in order to get completion in as many places as possible, although I prefer ido's way of switching buffers.

#+BEGIN_SRC emacs-lisp
  (use-package helm
    :ensure t
    :diminish helm-mode
    :init
    (progn
      (require 'helm-config)
      (setq helm-candidate-number-limit 100)
      ;; From https://gist.github.com/antifuchs/9238468
      (setq helm-idle-delay 0.0 ; update fast sources immediately (doesn't).
            helm-input-idle-delay 0.01  ; this actually updates things
                                          ; reeeelatively quickly.
            helm-yas-display-key-on-candidate t
            helm-quick-update t
            helm-M-x-requires-pattern nil
            helm-ff-skip-boring-files t)
      (helm-mode))
    :bind (("C-c h" . helm-mini)
           ("C-h a" . helm-apropos)
           ("C-x C-b" . helm-buffers-list)
           ("C-x b" . helm-buffers-list)
           ("M-y" . helm-show-kill-ring)
           ("M-x" . helm-M-x)
           ("C-x c o" . helm-occur)
           ("C-x c s" . helm-swoop)
           ("C-x c y" . helm-yas-complete)
           ("C-x c Y" . helm-yas-create-snippet-on-region)
           ("C-x c SPC" . helm-all-mark-rings)))

#+END_SRC

Also, visual-line-mode is so much better than auto-fill-mode. It does not actually break the text into multiple lines - it only looks that way

#+BEGIN_SRC emacs-lisp
  (remove-hook 'text-mode-hook #'turn-on-auto-fill)
  (add-hook 'text-mode-hook 'turn-on-visual-line-mode)
#+END_SRC

** Projectile

Install projectile and helm-projectile

#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :ensure t
    :diminish projectile-mode
    :config
    (progn
      (setq projectile-require-project-root nil)
      (setq projectile-keymap-prefix (kbd "C-c p"))
      (setq projectile-completion-system 'default)
      (setq projectile-enable-caching t)
      (setq projectile-indexing-method 'alien)
      (add-to-list 'projectile-globally-ignored-files "node-modules"))
    :config
    (projectile-global-mode))
  (use-package helm-projectile
    :ensure t)
#+END_SRC

** Smooth scrolling

In order to disable the jumpy scrolling
#+BEGIN_SRC emacs-lisp
  (use-package smooth-scrolling
    :ensure t
    :init)
  (setq scroll-margin 5 scroll-conservatively 9999 scroll-step 1)
#+END_SRC

** Set default browser to firefox

#+BEGIN_SRC emacs-lisp
  (setq browse-url-browser-function 'browse-url-generic
        browse-url-generic-program "firefox")
#+END_SRC

* Links
** *[[http://doc.norang.ca/][Norang - Organize Your Life in Plain Text]]*
** [[orgmode.org/tmp/worg/org-tutorials/org-latex-export.html][Org-Mode Latex Export]]
** [[http://juanjoalvarez.net/es/detail/2014/sep/19/vim-emacsevil-chaotic-migration-guide/][Evil Migration Guide]]
** [[https://github.com/hrs/dotfiles/tree/master/emacs.d][Harry Schwartz Emacs Configuration]]
** [[http://pages.sachachua.com/.emacs.d/Sacha.html][Sacha Chua's Emacs Configuration]]
** [[https://spwhitton.name/blog/entry/eviltricks/][Evil Tricks]]
** [[https://github.com/aaronbieber/dotfiles/tree/master/configs/emacs.d/evil-rebellion][Aron Bieber Evil Rebelion]]
* Configure ido (disabled)

#+BEGIN_SRC emacs-lisp
;  (setq ido-enable-flex-matching t)
;  (setq ido-everywhere t)
;  (ido-mode 1)
;  (ido-ubiquitous)
;  (flx-ido-mode 1) ; better/faster matching
;  (setq ido-create-new-buffer 'always) ; don't confirm to create new buffers
;  (ido-vertical-mode 1)
;  (setq ido-vertical-define-keys 'C-n-and-C-p-only)
#+END_SRC

